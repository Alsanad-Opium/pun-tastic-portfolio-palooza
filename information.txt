Project overview and how to edit key files

Run and build
- Dev: npm run dev (http://localhost:8080)
- Build: npm run build
- Preview: npm run preview

Entry points
- index.html: Root HTML and #root mount; loads /src/main.tsx
- src/main.tsx: Creates React root and renders <App />; imports global CSS
- src/App.tsx: App shell with providers (TanStack Query, tooltips, toasters) and router (/, 404)

Styling & themes
- src/index.css: Global Tailwind layers, theme variables
  - :root: Light mode palette (default)
  - .neon-hacker: Dark neon mode (glow, scanlines, mono font). Edit variables and rules inside this block
  - .punny-mode: Comic palette and gradients; Baloo/Comic Neue fonts for playful copy
  - Utilities: neon-glow, scanlines, float, wobble, party-mode
- tailwind.config.ts: Tailwind scanning paths and theme extensions (colors, fonts, animations). Add classes/colors here

Context/providers
- src/contexts/ThemeContext.tsx: Theme state (light | neon-hacker | punny-mode) + effects
  - setTheme(theme): switch instantly
  - triggerGrayscale(): 3s grayscale overlay
  - triggerPartyMode(): 10s party effect
- src/components/SoundManager.tsx: Optional sounds (muted by default). useSound() => playSound/toggleMute
- src/components/AchievementSystem.tsx: Achievements persisted to localStorage. useAchievements() => unlockAchievement, addJokeClick, addRageClick

Keyboard & UI
- src/hooks/useKeyboardShortcuts.ts: Global shortcuts
  - P x3 toggles Punny Mode; F grayscale; L party; ? help; ESC closes
- src/components/KeyboardShortcuts.tsx: Help modal content

Pages & sections
- src/pages/Index.tsx: Composes sections/providers; shows scanlines overlay in hacker mode
- Components (src/components/):
  - Navbar.tsx: Nav; theme toggle and section anchors (about, projects, skills, resume, contact)
  - Hero.tsx: Typewriter intro; “Don’t click me” uses toasts + rage-click tracking; edit copy in "texts"
  - About.tsx: Avatar hats, timeline; edit arrays for hats/timeline/skills
  - Projects.tsx: Flip cards; edit projects array; includes “The Button That Does Nothing”
  - Skills.tsx: Clickable skill badges w/ jokes; confetti; progress
  - Resume.tsx: Download/View resume buttons. Replace file at /public/assets/resume.pdf
  - Contact.tsx: Form with playful placeholders; mini-game placeholder for “I’m bored”
  - FloatingJokes.tsx: Floating emoji buttons; jokes loaded from /public/assets/jokes.json; local analytics in localStorage (joke-click-analytics)
  - FakeCrashIntro.tsx: Boot-up skit with ESC/Skip
  - CursorTrail.tsx: Emoji cursor trail; theme-specific particles

UI library
- src/components/ui/*: shadcn-ui components (Button, Card, etc.). Adjust Tailwind classes for styling

Utilities & helpers
- src/lib/utils.ts: cn() helper for merging classes

Public assets
- public/assets/jokes.json: Edit this array to change floating joke texts
- public/assets/resume.pdf: Place your resume with this exact filename (see README file in the folder)

Routing
- react-router-dom in src/App.tsx. Add routes by inserting new <Route path="..." element={<MyPage />} /> above the catch-all

Customization quick guide
- Copy: Edit strings directly in each component
- Colors: Update HSL variables in src/index.css for each theme block
- Fonts: Tailwind font families in tailwind.config.ts and @import in src/index.css
- Animations: Adjust keyframes and durations in src/index.css or Framer Motion props in components

Accessibility
- Keep interactive elements keyboardable and labeled; ESC closes modals; skip intro; avoid trapping focus

Performance tips
- Lazy-load heavy animation libraries if you add them later (e.g., Lottie/GSAP)
- Keep FloatingJokes spawn frequency reasonable for perf (currently 2s interval; adjust in component)